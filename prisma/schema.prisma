// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // For credentials login
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  wallets        Wallet[]
  transactions   Transaction[]
  incomeSources  IncomeSource[]
  budgetPeriods  BudgetPeriod[]
  plannedExpenses PlannedExpense[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Budget Tracker Models
model Wallet {
  id          String      @id @default(cuid())
  name        String
  type        WalletType
  balance     Decimal     @default(0) @db.Decimal(15, 2)
  currency    String      @default("PHP")
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String

  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transaction[]
  transfersTo       Transaction[]  @relation("TransferDestination")
  incomeSources     IncomeSource[]
  plannedExpenses   PlannedExpense[]

  @@index([userId])
}

model Transaction {
  id              String          @id @default(cuid())
  amount          Decimal         @db.Decimal(15, 2)
  type            TransactionType
  category        String
  description     String?
  date            DateTime        @default(now())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String
  walletId        String
  
  // Transfer-specific fields
  toWalletId      String?         // Destination wallet for transfers
  transferFee     Decimal?        @db.Decimal(15, 2) // Optional transfer fee
  transferId      String?         // Groups related transfer transactions
  
  // Planned expense tracking
  plannedExpenseId String?        // Link to planned expense (for EXPENSE transactions)

  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet          Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  toWallet        Wallet? @relation("TransferDestination", fields: [toWalletId], references: [id], onDelete: Cascade)
  plannedExpense  PlannedExpense? @relation(fields: [plannedExpenseId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([walletId])
  @@index([toWalletId])
  @@index([date])
  @@index([transferId])
  @@index([plannedExpenseId])
}

model Category {
  id        String      @id @default(cuid())
  name      String
  type      TransactionType
  icon      String?
  color     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Budget {
  id        String   @id @default(cuid())
  name      String
  amount    Decimal  @db.Decimal(15, 2)
  category  String
  period    String   // monthly, weekly, yearly
  startDate DateTime
  endDate   DateTime
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model IncomeSource {
  id            String        @id @default(cuid())
  name          String        // e.g., "Main Job", "Freelance", "Side Hustle"
  amount        Decimal       @db.Decimal(15, 2)
  frequency     PayFrequency
  nextPayDate   DateTime
  lastPayDate   DateTime?
  isActive      Boolean       @default(true)
  userId        String
  walletId      String?       // Which wallet receives this income
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet Wallet? @relation(fields: [walletId], references: [id])

  @@index([userId])
  @@index([nextPayDate])
}

model BudgetPeriod {
  id              String    @id @default(cuid())
  startDate       DateTime
  endDate         DateTime
  totalIncome     Decimal   @db.Decimal(15, 2)
  plannedExpenses Decimal   @db.Decimal(15, 2) @default(0)
  actualExpenses  Decimal   @db.Decimal(15, 2) @default(0)
  isActive        Boolean   @default(true)
  userId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([startDate, endDate])
}

model PlannedExpense {
  id              String            @id @default(cuid())
  title           String
  amount          Decimal           @db.Decimal(15, 2)
  spentAmount     Decimal           @db.Decimal(15, 2) @default(0) // Track how much has been spent
  category        String
  description     String?
  targetDate      DateTime
  priority        ExpensePriority   @default(MEDIUM)
  confidenceLevel ConfidenceLevel   @default(MEDIUM)
  status          PlannedExpenseStatus @default(PLANNED)
  walletId        String?           // Preferred wallet for this expense
  userId          String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  lastConfidenceUpdate DateTime?     // Track when confidence was last calculated

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet       Wallet?       @relation(fields: [walletId], references: [id])
  transactions Transaction[] // Related transactions that contribute to this planned expense

  @@index([userId])
  @@index([targetDate])
  @@index([status])
  @@index([confidenceLevel])
}

// Enums
enum WalletType {
  GCASH
  BPI_BANK
  UNION_BANK
  CASH
  SAVINGS
  CREDIT_CARD
  OTHER
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum PayFrequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
  BIMONTHLY
  QUARTERLY
  ANNUALLY
  IRREGULAR
}

enum ExpensePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PlannedExpenseStatus {
  PLANNED     // Just planned, not executed yet
  SAVED       // Money set aside for this expense
  COMPLETED   // Expense has been made (converted to actual transaction)
  CANCELLED   // No longer planning this expense
  POSTPONED   // Delayed to a later date
}

enum ConfidenceLevel {
  HIGH        // Very confident expense can be afforded
  MEDIUM      // Moderately confident, some risk factors
  LOW         // Low confidence, high risk of not affording
}
